
'''
#img=cv2.bitwise_not(img)
#_,th2= cv2.threshold(img,200,255,cv2.THRESH_BINARY)
#for i in range(10):
#    cv2.line(img, (0,(img.shape[0]//9)*i),(img.shape[1],(img.shape[0]//9)*i), (255, 255, 255), 1, 1)
#    cv2.line(warped2, (0,(img.shape[0]//9)*i),(img.shape[1],(img.shape[0]//9)*i), (125, 0, 55), 1, 1)
#
#for j in range(10):
#    cv2.line(img, ((img.shape[1]//9)*j, 0), ((img.shape[1]//9)*j, img.shape[0]), (255, 255, 255), 1, 1)
#    cv2.line(warped2, ((img.shape[1]//9)*j, 0), ((img.shape[1]//9)*j, img.shape[0]), (125, 0, 55), 1, 1)
#
img=cv2.cvtColor(img, cv2.COLOR_RGB2GRAY);

img = cv2.medianBlur(img,5)
th2 = cv2.adaptiveThreshold(img,255,cv2.ADAPTIVE_THRESH_MEAN_C,\
            cv2.THRESH_BINARY_INV,13,10)
kernel = np.ones((2,2),np.uint8)
erosion = cv2.erode(th2,kernel,iterations = 1)
erosion = th2
factor = int(270/9)
x=0
y=0
plt.subplot(121),plt.imshow(erosion,cmap='Greys_r')
blank = np.zeros(erosion.shape,np.uint8)
for i in range(9):
    for j in range(9):
        print(y,y+factor,x,x+factor)
        section = th2[y:y+factor,x:x+factor]
        #section = th2[int(270/9):2*int(270/9),0:int(270/9)]
        kernel= np.ones((2,2),np.uint8)
        section = cv2.dilate(section,kernel)
        #section = cv2.erode(section,cv2.getStructuringElement(cv2.MORPH_RECT,(3,3)),iterations=1)
        
        contours,heirarchy = cv2.findContours(section,1,2)
        for cnt in contours:
            M = cv2.moments(cnt)
            if M['m00']==0:
                cx=0
            else:
                cx = int(M['m10']/M['m00'])
        #print(cv2.contourArea(contours[0]))
        #print(cv2.contourArea(contours[1]))
        #,y,w,h=cv2.boundingRect(contours[0])
        #print(x,y,w,h) 
            blank1 = np.zeros(section.shape,np.uint8)
            if (cx>=10 and cx<=20):
                pass
            blank1= cv2.drawContours(blank1,contours,0,(255,0,0),-1)
            #section = cv2.rectangle(blank,(x,y),(x+w,y+h),(255,0,0),1)
            cv2.imwrite("{}_{}.jpg".format(i,j),blank1)
            blank[y:y+factor,x:x+factor]=blank1
        x+=factor
    x=0
    y+=factor
plt.subplot(122),plt.imshow(blank,cmap = 'Greys_r')
plt.show()
'''
